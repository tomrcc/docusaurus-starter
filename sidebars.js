import sidebarData from "./data/sidebar.json";
// @ts-check

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.

 @type {import('@docusaurus/plugin-content-docs').SidebarsConfig}
 */

const sidebarDataFormatted = formatSidebarData(sidebarData);

const sidebars = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],

  // But you can create a sidebar manually

  tutorialSidebar: sidebarDataFormatted,
};

// https://docusaurus.io/docs/sidebar/items

export default sidebars;

// Format the sidebar from how data is output while editing in CloudCannon, to how Docusaurus expects for the build
function formatSidebarData(sidebarData) {
  // Loop through each top level item in the sidebar which could be category, doc, or link
  for (const key in sidebarData) {
    // Docusaurus doesn't like fields like slug and description to be empty, so we delete if empty
    removeEmptyKeyValues(sidebarData[key]);
    // When selecting a page from a collection in CloudCannon, the resulting value of the input is the whole file path to the root
    // `/docs/intro.mdx`
    // Docusaurus wants it to be relative to the docs folder without the file ext, so
    // `intro`
    formatDocPageIds(sidebarData[key]);
  }
  return sidebarData;
}

function removeEmptyKeyValues(jsonObject) {
  for (const key in jsonObject) {
    const value = jsonObject[key];
    if (!value) {
      delete jsonObject[key];
    }
    if (typeof value === "object") {
      removeEmptyKeyValues(jsonObject[key]);
    }
  }

  return jsonObject;
}

function formatDocPageIds(jsonObject) {
  if (jsonObject.id) {
    jsonObject.id = jsonObject.id
      .replace("/docs/", "")
      .replace(".mdx", "")
      .replace(".md", "");
  }

  if (jsonObject.items?.length) {
    for (const item of jsonObject.items) {
      formatDocPageIds(item);
    }
  }

  return jsonObject;
}
